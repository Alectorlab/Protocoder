{"entries":{"setup":{"desc":"`setup` is called when your program starts. This is the spot\nto setup all of your components and UI elements.\n","usage":"function setup() {\n  // This is called when your program starts\n  // This is where you'll setup your components and ui\n  // elements\n}\n"},"loop":{"desc":"`loop` is a function that is called on every tick of your program. \nThis is a good place to check for events and call \n","usage":"function loop() {\n  // This is called for every tick of your program\n}\n"},"moto.addButton":{"desc":"`moto.addButton` will create a button in your application\nIt takes a `name` and a `callback` to be called when it's\npressed.\n","usage":"moto.addButton(\"Turn on LED\", function() {\n  turnOffLED = false;\n});\n"},"moto.createDigitalOutput":{"desc":"Create a digital output on the pin. It is the most basic hardware building\nblock. Useful for turning on LEDs and other digital outputs.\n\nTo create a digital output, simply pass the method with a pin number\nthat we're attaching the device to as well as a name to assign to it\nthat we can refer to later.\n","usage":"moto.createDigitalOutput(0, 'onBoardLED');\n"},"digitalOutput.write":{"desc":"Write a boolean value to the digital output. Since digital outputs are either\n0 or 1, true or false, we'll pass in either true or false to interact\nwith the digital output\n","usage":"// moto.createDigitalOutput(0, 'led');\nled.write(true);\n"},"moto.createDigitalInput":{"desc":"A digital input is a digital input, it can read either true or false.\nThis is useful for things like buttons to see if they are pressed or not.\n\nThe first parameter is the pin, the second is the common name we want \nto assign the digital input to and the last is the callback function\nwe want to run after it's created.\n","usage":"moto.createDigitalInput(9, 'digitalInput', function() {});\n"},"digitalInput.read":{"desc":"Read from the digital input device. If the digital input is completed, \nthe read will return true. If it is not, then it will return false.\n","usage":"// moto.createDigitalInput(9, 'digitalInput', function() {});\ndigitalInput.read(function(value) {\n  // The value of the digital input\n});\n"},"digitalInput.when":{"desc":"Sometimes we want to run a function only when the value of the digital\ninput is true or false. For this, we can use the method `when`\n","usage":"// moto.createDigitalInput(8, 'digitalInput', function() {});\ndigitalInput.when(false, function() {\n  // This callback will be fired once when the digitalInput\n  // is triggered to false\n});\n"},"digitalInput.whenever":{"desc":"Sometimes we want to run a function everytime the value of the digital\ninput is true or false. For this, we can use the method `whenever`\n","usage":"// moto.createDigitalInput(8, 'digitalInput', function() {});\ndigitalInput.whenever(false, function() {\n  // This callback will be fired when the digitalInput\n  // is triggered to false\n});\n"},"moto.createAnalogInput":{"desc":"Create an analog input for your application on a pin. Analog inputs are used\nto measure things like voltage across a pin. Think of knobs and dials.\nA common analog input is called a `potentiometer`.\n\nTo create an analog input, call the method `createAnalogInput` with\nthe pin we're attaching the analog device into with a name that it's called\nand a callback function to be called once it's created.\n","usage":"moto.createAnalogInput(41, 'potentiometer', function() {\n});\n"},"analogInput.read":{"desc":"Read the current voltage on the analog input device. The value will\ncome out as a float, somewhere between 0 and 1.\n","usage":"// moto.createAnalogInput(41, 'potentiometer', function() {});\npotentiometer.read(function(v) {\n  moto.log(\"Current value is: \" + v);\n});\n"},"moto.createPwmOutput":{"desc":"Create a pwm output. The first parameter is the pin, the second is the frequency of\nthe pwm output device. The third parameter is the name of the component\nand we'll have a callback after it's created.\n\nAfter it's created, we can set the duty cycle by calling `pwm.setDutyCycle(dc)`\nwhere `dc` is a number between 0 and 1. \n\nWe can also set the pulse width directly with `pwm.setPulseWidth(pw);` This is\nusually useful when controlling a servo. \n\nWhere `pwm` is the name of the component in both places.\n","usage":"moto.createPwmOutput(5, 50, 'pwm', function() {\n  // Now you have a pwm module\n});\n"},"PwmOutput.setDutyCycle":{"desc":"Set the duty cycle of the pwm output to a new value\n","usage":"// moto.createPwmOutput(5, 50, 'pwm', function() {});\npwm.setDutyCycle(0.4);\n"},"PwmOutput.setPulseWidth":{"desc":"Set the new pulse width on the pwm output device. This is usually a number\nbetween 0 and 2000 for a servo\n","usage":"// moto.createPwmOutput(5, 50, 'pwm', function() {});\npwm.setPulseWidth(1500);\n"},"moto.addSeekBar":{"desc":"Add a seekbar to your view. This will add a seekbar to your current view including a textlabel. \nIt takes 4 parameters:\n  \n1. 1) Text for the corresponding label\n2. 2) The max value for the seekbar, span between `0 and max`\n3. 3) The initial position \n4. 4) A callback\n","usage":"moto.addSeekBar(\"Slide me\", 20, 10, function(newValue) {\n  // Create a seekBar with a text label of `Slide me`\n  // that spans from 0 to 20, starting at 10 with a callback\n  // that will be fired everytime the seekbar moves\n});\n"},"moto.createPulseInput":{"desc":"Create a pulse input, which can measure the changes between digital signals or the length of a signal. \n","usage":"moto.createPulseInput(34, 'pi', function() {\n  // Now we have a pulse input\n});\n"},"PulseInput.getDuration":{"desc":"Get the duration of the latest pulse from a PulseInput device. This will return a float to the callback\n","usage":"// moto.createPulseInput(34, 'pi', function() {});\npi.getDuration(function(d) {\n  // d is the duration\n});\n"},"PulseInput.getFrequency":{"desc":"Get the frequency of the latest pulse from a PulseInput device. This will return a float to the callback\n","usage":"// moto.createPulseInput(34, 'pi', function() {});\npi.getFrequency(function(f) {\n  // f is the frequency\n});\n"},"moto.createUart":{"desc":"Create a uart device.\n","usage":"moto.createUart(34, 35, 19200, 'uart', function() {\n  // Now we'll have a UART device\n});\n"},"Uart.read":{"desc":"Read from a uart device. \n","usage":"//moto.createUart(34, 35, 19200, 'uart', function() {});\nuart.read(function(str) {\n  // str is the string read from the device\n});\n"},"Uart.write":{"desc":"Write a string to a uart device.\n","usage":"//moto.createUart(34, 35, 19200, 'uart', function() {});\nuart.write(\"hello\", function(bool) {\n  // bool will be true if writing was successful\n  // and false if unsuccessful\n});\n"},"moto.createSpi":{"desc":"Create a Serial Peripheral Interface\n","usage":"moto.createSpi(misoPin, mosiPin, clockPin, slavePins, 'spi', function() {\n  // We now have an SPI\n});\n"},"Spi.writeRead":{"desc":"Write and read on the SPI device. The first argument is the slave\nnumber you want to write and read to, the second is the data\nas a list, and the final argument is the callback to receive the response\nback from the slave\n","usage":"//moto.createSpi(misoPin, mosiPin, clockPin, slavePins, 'spi', function() {});\nspi.writeRead(0, ['0x01', '0x02', '0x03'], function(resp) {\n  // the resp will be the response\n});\n"},"moto.createTwoWire":{"desc":"Create a Two Wire device on a pin\n","usage":"moto.createTwoWire(pin, 'spi', function() {\n  // We now have an Two wire device\n});\n"},"TwoWire.writeRead":{"desc":"Write and read on the two wire device. \n","usage":"// moto.createTwoWire(pin, 'twi', function() {});\nvar address = 0,\n    bytesToRead = 4,\n    dataToWrite = ['0x01', '0x02', '0x03'];\n    \ntwi.writeRead(address, dataToWrite, bytesToRead, function(resp) {\n  // The bytes read will be the response\n});"}}}