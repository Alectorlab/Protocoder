entries:
  setup:
    desc: |
      `setup` is called when your program starts. This is the spot
      to setup all of your components and UI elements.
    usage: |
      function setup() {
        // This is called when your program starts
        // This is where you'll setup your components and ui
        // elements
      }
  loop:
    desc: |
      `loop` is a function that is called on every tick of your program. 
      This is a good place to check for events and call 
    usage: |
      function loop() {
        // This is called for every tick of your program
      }
  ui.addButton:
    desc: |
      `ui.addButton` will create a button in your application
      It takes a `name` and a `callback` to be called when it's
      pressed.
    usage: |
      ui.addButton("Turn on LED", function() {
        turnOffLED = false;
      });
  ioio.createDigitalOutput:
    desc: |
      Create a digital output on the pin. It is the most basic hardware building
      block. Useful for turning on LEDs and other digital outputs.
      
      To create a digital output, simply pass the method with a pin number
      that we're attaching the device to as well as a name to assign to it
      that we can refer to later.
    usage: |
      ioio.createDigitalOutput(0, 'onBoardLED');
      
  digitalOutput.write:
    desc: |
      Write a boolean value to the digital output. Since digital outputs are either
      0 or 1, true or false, we'll pass in either true or false to interact
      with the digital output
    usage: |
      // ioio.createDigitalOutput(0, 'led');
      led.write(true);
      
  ioio.createDigitalInput:
    desc: |
      A digital input is a digital input, it can read either true or false.
      This is useful for things like buttons to see if they are pressed or not.
      
      The first parameter is the pin, the second is the common name we want 
      to assign the digital input to and the last is the callback function
      we want to run after it's created.
    usage: |
      ioio.createDigitalInput(9, 'digitalInput', function() {});
      
  digitalInput.read:
    desc: |
      Read from the digital input device. If the digital input is completed, 
      the read will return true. If it is not, then it will return false.
    usage: |
      // ioio.createDigitalInput(9, 'digitalInput', function() {});
      digitalInput.read(function(value) {
        // The value of the digital input
      });
  
  digitalInput.when:
    desc: |
      Sometimes we want to run a function only when the value of the digital
      input is true or false. For this, we can use the method `when`
    usage: |
      // ioio.createDigitalInput(8, 'digitalInput', function() {});
      digitalInput.when(false, function() {
        // This callback will be fired once when the digitalInput
        // is triggered to false
      });
  
  digitalInput.whenever:
    desc: |
      Sometimes we want to run a function everytime the value of the digital
      input is true or false. For this, we can use the method `whenever`
    usage: |
      // ioio.createDigitalInput(8, 'digitalInput', function() {});
      digitalInput.whenever(false, function() {
        // This callback will be fired when the digitalInput
        // is triggered to false
      });
      
  ioio.createAnalogInput:
    desc: |
      Create an analog input for your application on a pin. Analog inputs are used
      to measure things like voltage across a pin. Think of knobs and dials.
      A common analog input is called a `potentiometer`.
      
      To create an analog input, call the method `createAnalogInput` with
      the pin we're attaching the analog device into with a name that it's called
      and a callback function to be called once it's created.
    usage: |
      ioio.createAnalogInput(41, 'potentiometer', function() {
      });
      
  analogInput.read:
    desc: |
      Read the current voltage on the analog input device. The value will
      come out as a float, somewhere between 0 and 1.
    usage: |
      // ioio.createAnalogInput(41, 'potentiometer', function() {});
      potentiometer.read(function(v) {
        console.log("Current value is: " + v);
      });
      
  ioio.createPwmOutput:
    desc: |
      Create a pwm output. The first parameter is the pin, the second is the frequency of
      the pwm output device. The third parameter is the name of the component
      and we'll have a callback after it's created.
      
      After it's created, we can set the duty cycle by calling `pwm.setDutyCycle(dc)`
      where `dc` is a number between 0 and 1. 
      
      We can also set the pulse width directly with `pwm.setPulseWidth(pw);` This is
      usually useful when controlling a servo. 
      
      Where `pwm` is the name of the component in both places.
    usage: |
      ioio.createPwmOutput(5, 50, 'pwm', function() {
        // Now you have a pwm module
      });
  
  PwmOutput.setDutyCycle:
    desc: |
      Set the duty cycle of the pwm output to a new value
    usage: |
      // ioio.createPwmOutput(5, 50, 'pwm', function() {});
      pwm.setDutyCycle(0.4);
      
  PwmOutput.setPulseWidth:
    desc: |
      Set the new pulse width on the pwm output device. This is usually a number
      between 0 and 2000 for a servo
    usage: |
      // ioio.createPwmOutput(5, 50, 'pwm', function() {});
      pwm.setPulseWidth(1500);
      
  ui.addSeekBar:
    desc: |
      Add a seekbar to your view. This will add a seekbar to your current view including a textlabel. 
      It takes 4 parameters:
        
      1. 1) Text for the corresponding label
      2. 2) The max value for the seekbar, span between `0 and max`
      3. 3) The initial position 
      4. 4) A callback
      
    usage: |
      ui.addSeekBar("Slide me", 20, 10, function(newValue) {
        // Create a seekBar with a text label of `Slide me`
        // that spans from 0 to 20, starting at 10 with a callback
        // that will be fired everytime the seekbar moves
      });
      
  ioio.createPulseInput:
    desc: |
      Create a pulse input, which can measure the changes between digital signals or the length of a signal. 
    usage: |
      ioio.createPulseInput(34, 'pi', function() {
        // Now we have a pulse input
      });
      
  PulseInput.getDuration:
    desc: |
      Get the duration of the latest pulse from a PulseInput device. This will return a float to the callback
    usage: |
      // ioio.createPulseInput(34, 'pi', function() {});
      pi.getDuration(function(d) {
        // d is the duration
      });
      
  PulseInput.getFrequency:
    desc: |
      Get the frequency of the latest pulse from a PulseInput device. This will return a float to the callback
    usage: |
      // ioio.createPulseInput(34, 'pi', function() {});
      pi.getFrequency(function(f) {
        // f is the frequency
      });
      
  ioio.createUart:
    desc: |
      Create a uart device.
    usage: |
      ioio.createUart(34, 35, 19200, 'uart', function() {
        // Now we'll have a UART device
      });
      
  Uart.read:
    desc: |
      Read from a uart device. 
    usage: |
      //ioio.createUart(34, 35, 19200, 'uart', function() {});
      uart.read(function(str) {
        // str is the string read from the device
      });
  Uart.write:
    desc: |
      Write a string to a uart device.
    usage: |
      //ioio.createUart(34, 35, 19200, 'uart', function() {});
      uart.write("hello", function(bool) {
        // bool will be true if writing was successful
        // and false if unsuccessful
      });
  
  ioio.createSpi:
    desc: |
      Create a Serial Peripheral Interface
    usage: |
      ioio.createSpi(misoPin, mosiPin, clockPin, slavePins, 'spi', function() {
        // We now have an SPI
      });
  
  Spi.writeRead:
    desc: |
      Write and read on the SPI device. The first argument is the slave
      number you want to write and read to, the second is the data
      as a list, and the final argument is the callback to receive the response
      back from the slave
    usage: |
      //ioio.createSpi(misoPin, mosiPin, clockPin, slavePins, 'spi', function() {});
      spi.writeRead(0, ['0x01', '0x02', '0x03'], function(resp) {
        // the resp will be the response
      });
      
  ioio.createTwoWire:
    desc: |
      Create a Two Wire device on a pin
    usage: |
      ioio.createTwoWire(pin, 'spi', function() {
        // We now have an Two wire device
      });
  
  TwoWire.writeRead:
    desc: |
      Write and read on the two wire device. 
    usage: |
      // ioio.createTwoWire(pin, 'twi', function() {});
      var address = 0,
          bytesToRead = 4,
          dataToWrite = ['0x01', '0x02', '0x03'];
          
      twi.writeRead(address, dataToWrite, bytesToRead, function(resp) {
        // The bytes read will be the response
      });